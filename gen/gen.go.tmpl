{{ define "main" }}// Code generated by 'go generate'; DO NOT EDIT.

package {{.PackageName}}

import (
    "io"
    "net/http"
)

type traits int

const (
    traitsBase traits = 0
{{- range $_, $t := .OrderByAtom }}
    traits{{ $t.Name }} traits = {{ $t.Atom }}
{{- end }}
)

{{- range $_, $t := .OrderByName }}
{{- if $t.HasParents }}

type {{ $.TypeNameL }}{{ $t.Name }} struct {
    *{{ $.TypeNameL }}Base
    {{- range $_, $p := $t.Parents }}
    *{{ $.TypeNameL }}{{$p}}
    {{- end }}
}
{{- end }}

var (
    _ http.ResponseWriter = (*{{ $.TypeNameL }}{{ $t.Name }})(nil)
    {{- range $_, $i := $t.Interfaces }}
    _ {{$i}} = (*{{ $.TypeNameL }}{{ $t.Name }})(nil)
    {{- end }}
)

func new{{ $.TypeName }}{{ $t.Name }}(b *{{ $.TypeNameL }}Base) *{{ $.TypeNameL }}{{ $t.Name }} {
    return &{{ $.TypeNameL }}{{ $t.Name }}{
{{ $.TypeNameL }}Base: b,
        {{- range $_, $p := $t.Parents }}
{{ $.TypeNameL }}{{$p}}: newResponseProxy{{$p}}(b),
        {{- end }}
    }
}
{{- end }}

func detectTraits(w http.ResponseWriter) (out traits) {
    {{- range $i, $t := .Traits }}
    if _, has := w.({{ $t.Interface }}); has {
        out |= 1<<{{$i}}
    }
    {{- end }}
    return
}

func new{{ .TypeName }}(proxied http.ResponseWriter) ResponseWriterProxier {
    b := &{{ .TypeNameL }}Base{proxied: proxied}

    switch detectTraits(proxied) {
    case traitsBase:
        return b
    {{- range $_, $t := .OrderByName }}
    case traits{{ $t.Name }}:
        return newResponseProxy{{$t.Name}}(b)
    {{- end }}
    default:
        panic("unreachable")
    }
}
{{ end }}
